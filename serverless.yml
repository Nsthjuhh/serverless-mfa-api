service: mfa-api

frameworkVersion: ^3.7

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 30

  # Experimented with various memory sizes. Manually calling the totpValidate
  # function once every few seconds, the average durations were as follows:
  #   512 MB = 48 ms
  #   256 MB = 71 ms
  #   128 MB = 159 ms
  memorySize: 512
  apiGateway:
    apiKeys:
    - ${self:custom.namespace}_global
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:*:*:table/${self:custom.namespace}_*"

custom:
  namespace: ${self:service}_${sls:stage}
  apiKeyTable: ${self:custom.namespace}_api-key
  totpTable: ${self:custom.namespace}_totp
  u2fTable: ${self:custom.namespace}_u2f
  dev_env: staging
  prod_env: production

functions:
  apiKeyActivate:
    handler: handlers/api-key.activate
    name: ${self:custom.namespace}_apiKeyActivate
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
    events:
      - http:
          path: api-key/activate
          method: post
          private: true
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  apiKeyCreate:
    handler: handlers/api-key.create
    name: ${self:custom.namespace}_apiKeyCreate
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
    events:
      - http:
          path: api-key
          method: post
          private: true
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  totpCreate:
    handler: handlers/totp.create
    name: ${self:custom.namespace}_totpCreate
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      TOTP_TABLE_NAME: ${self:custom.totpTable}
    events:
      - http:
          path: totp
          method: post
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  totpDelete:
    handler: handlers/totp.delete
    name: ${self:custom.namespace}_totpDelete
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      TOTP_TABLE_NAME: ${self:custom.totpTable}
    events:
      - http:
          path: totp/{uuid}
          method: delete
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  totpValidate:
    handler: handlers/totp.validate
    name: ${self:custom.namespace}_totpValidate
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      TOTP_TABLE_NAME: ${self:custom.totpTable}
    events:
      - http:
          path: totp/{uuid}/validate
          method: post
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  u2fCreateAuthentication:
    handler: handlers/u2f.createAuthentication
    name: ${self:custom.namespace}_u2fCreateAuthentication
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      U2F_TABLE_NAME: ${self:custom.u2fTable}
    events:
      - http:
          path: u2f/{uuid}/auth
          method: post
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  u2fCreateRegistration:
    handler: handlers/u2f.createRegistration
    name: ${self:custom.namespace}_u2fCreateRegistration
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      U2F_TABLE_NAME: ${self:custom.u2fTable}
    events:
      - http:
          path: u2f
          method: post
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  u2fDelete:
    handler: handlers/u2f.delete
    name: ${self:custom.namespace}_u2fDelete
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      U2F_TABLE_NAME: ${self:custom.u2fTable}
    events:
      - http:
          path: u2f/{uuid}
          method: delete
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  u2fValidateAuthentication:
    handler: handlers/u2f.validateAuthentication
    name: ${self:custom.namespace}_u2fValidateAuthentication
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      U2F_TABLE_NAME: ${self:custom.u2fTable}
    events:
      - http:
          path: u2f/{uuid}/auth
          method: put
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"
  u2fValidateRegistration:
    handler: handlers/u2f.validateRegistration
    name: ${self:custom.namespace}_u2fValidateRegistration
    environment:
      API_KEY_TABLE_NAME: ${self:custom.apiKeyTable}
      U2F_TABLE_NAME: ${self:custom.u2fTable}
    events:
      - http:
          path: u2f/{uuid}
          method: put
    tags:
      itse_app_name: ${self:service}
      itse_app_env: ${self:custom.${sls:stage}_env}
      itse_app_customer: "shared"
      managed_by: "serverless"

resources:
  Resources:
    ApiKeyDynamoDbGlobalTable:
      Type: AWS::DynamoDB::GlobalTable
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: value
            AttributeType: S
        KeySchema:
          - AttributeName: value
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        Replicas:
          - Region: ${aws:region}
            Tags:
              - Key: "itse_app_name"
                Value: ${self:service}
              - Key: "itse_app_env"
                Value: ${self:custom.${sls:stage}_env}
              - Key: "itse_app_customer"
                Value: "shared"
              - Key: "managed_by"
                Value: "serverless"
        TableName: ${self:custom.apiKeyTable}_global
    ApiKeyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: value
            AttributeType: S
        KeySchema:
          - AttributeName: value
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.apiKeyTable}
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    TotpDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.totpTable}
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    U2fDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.u2fTable}
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    ApiKeyActivateLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    ApiKeyCreateLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    TotpCreateLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    TotpDeleteLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    TotpValidateLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    U2fCreateAuthenticationLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    U2fCreateRegistrationLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    U2fDeleteLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    U2fValidateAuthenticationLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
    U2fValidateRegistrationLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
        Tags:
          - Key: "itse_app_name"
            Value: ${self:service}
          - Key: "itse_app_env"
            Value: ${self:custom.${sls:stage}_env}
          - Key: "itse_app_customer"
            Value: "shared"
          - Key: "managed_by"
            Value: "serverless"
